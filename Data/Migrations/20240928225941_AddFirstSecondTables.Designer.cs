// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240928225941_AddFirstSecondTables")]
    partial class AddFirstSecondTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClientQuotation", b =>
                {
                    b.Property<string>("ClientsClientCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuotationsId")
                        .HasColumnType("int");

                    b.HasKey("ClientsClientCode", "QuotationsId");

                    b.HasIndex("QuotationsId");

                    b.ToTable("ClientQuotation");
                });

            modelBuilder.Entity("Data.Entities.Addresses.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Data.Entities.Addresses.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Data.Entities.Addresses.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Data.Entities.Addresses.ReceiverAddressBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ClientId");

                    b.ToTable("ReceiverAddressBooks");
                });

            modelBuilder.Entity("Data.Entities.Addresses.SenderAddressBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ClientId");

                    b.ToTable("SenderAddressBooks");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.Abnormal", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbnormalStatus")
                        .HasColumnType("int");

                    b.Property<int>("AbnormalSubReasonId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterBrId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Number");

                    b.HasIndex("AbnormalSubReasonId");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("RegisterBrId");

                    b.HasIndex("RegisterId");

                    b.ToTable("Abnormals");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalImages", b =>
                {
                    b.Property<string>("AbnormalNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AbnormalNumber", "PictureUrl");

                    b.ToTable("AbnormalImages");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalMainReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbnormalMainReasons");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalReply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AbnormalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReplyText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReplyTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AbnormalNumber");

                    b.ToTable("AbnormalReplies");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalReplyImages", b =>
                {
                    b.Property<string>("ReplyNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReplyNumber", "PictureUrl");

                    b.ToTable("AbnormalReplyImages");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalSubReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MainReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainReasonId");

                    b.ToTable("AbnormalSubReasons");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.Ticket", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecieverAddressId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterBrId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("ReceiverAddressId");

                    b.HasIndex("RegisterBrId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("SubQuestionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.TicketMainQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketMainQuestions");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.TicketReplyImages", b =>
                {
                    b.Property<string>("TicketNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketNumber", "PictureUrl");

                    b.ToTable("TicketReplyImages");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.TicketSubQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MainQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainQuestionId");

                    b.ToTable("TicketSubQuestions");
                });

            modelBuilder.Entity("Data.Entities.Finance.Cash_FODCollection", b =>
                {
                    b.Property<string>("BillNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cash_FODCollectionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Payment_CollectionType")
                        .HasColumnType("int");

                    b.HasKey("BillNumber");

                    b.HasIndex("CollectorId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Cash_FODCollections");
                });

            modelBuilder.Entity("Data.Entities.Finance.COD_Collection", b =>
                {
                    b.Property<string>("BillNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CODCollectionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillNumber");

                    b.HasIndex("CollectorId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("COD_Collections");
                });

            modelBuilder.Entity("Data.Entities.Finance.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FormulaEquation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("WeightingRoundMode")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId", "QuotationId");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("Data.Entities.Finance.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActivationEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActivationStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AffailiatedBranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Auditing")
                        .HasColumnType("int");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EnableStatus")
                        .HasColumnType("int");

                    b.Property<int>("FinanceCentre")
                        .HasColumnType("int");

                    b.Property<decimal?>("HighestServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LowestServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuotationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffailiatedBranchCode");

                    b.HasIndex("ClientCode");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("Data.Entities.Finance.Quotation_Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("TierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneId", "QuotationId");

                    b.HasIndex("QuotationId");

                    b.ToTable("Quotation_Zones");
                });

            modelBuilder.Entity("Data.Entities.Finance.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffailiatedBranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginsOrDestinations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotationType")
                        .HasColumnType("int");

                    b.Property<int>("ZoneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffailiatedBranchCode");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Security");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionCode");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.Department", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LevelType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.Position", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Data.Entities.Operation.BranchLevel", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchStatus")
                        .HasColumnType("int");

                    b.Property<int>("ContactPhone")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LevelType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrincipalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuperId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Wallet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Code");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("PrincipalId");

                    b.HasIndex("SuperId");

                    b.ToTable("BranchLevels");
                });

            modelBuilder.Entity("Data.Entities.Operation.Client", b =>
                {
                    b.Property<string>("ClientCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CRNumber")
                        .HasColumnType("int");

                    b.Property<int>("ChargeableWeight")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ContractEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerBRId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsEnable")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxCODAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("WalletCash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientCode");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerBRId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data.Entities.Operation.COD_FOD_Adjustment.COD_FOD_Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdjustmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdjustmentType")
                        .HasColumnType("int");

                    b.Property<string>("ApplyingBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("CODAfterAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CODBeforeAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConfirmStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConfirmedTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FODAfterAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FODBeforeAdjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecievingBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplyingBranchId");

                    b.HasIndex("AuditorId");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("RecievingBranchId");

                    b.HasIndex("RegisterId");

                    b.ToTable("COD_FOD_Applications");
                });

            modelBuilder.Entity("Data.Entities.Operation.Order", b =>
                {
                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AdditionalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("COD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CODFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeAddFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClientCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientOrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectedWaybill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPickupInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerPickupNo")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryBRId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DeliveryFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FOD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FODFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HubWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InboundWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceValueFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Insured")
                        .HasColumnType("bit");

                    b.Property<decimal>("InternalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IsSigned")
                        .HasColumnType("int");

                    b.Property<int>("ItemWeight")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdateBRId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OFDTimes")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<string>("OriginCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupBRId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PickupCourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PickupWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecieverAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecieverAreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverPhone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettlmentMethod")
                        .HasColumnType("int");

                    b.Property<string>("SigningBRId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SigningTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalFees")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[DeliveryFees] + [AdditionalFees] + [ChangeAddFees]");

                    b.Property<string>("TripleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Voided")
                        .HasColumnType("int");

                    b.Property<decimal>("VolumeWeight")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(([Length] * [Width] * [Height]) / 5000)", true);

                    b.Property<string>("WaybillNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderNumber");

                    b.HasIndex("ClientCode");

                    b.HasIndex("DeliveryBRId");

                    b.HasIndex("DeliveryCourierId");

                    b.HasIndex("LastUpdateBRId");

                    b.HasIndex("PickupBRId");

                    b.HasIndex("PickupCourierId");

                    b.HasIndex("ProductTypeCode");

                    b.HasIndex("RecieverAddressId");

                    b.HasIndex("SenderAddressId");

                    b.HasIndex("SigningBRId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.Operation.Order_Scan", b =>
                {
                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ScanCode")
                        .HasColumnType("int");

                    b.Property<string>("BranchScanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryCourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NextBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PickupCourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PreviousBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ScanTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScannerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderNumber", "ScanCode");

                    b.HasIndex("BranchScanId");

                    b.HasIndex("DeliveryCourierId");

                    b.HasIndex("NextBranchId");

                    b.HasIndex("PickupCourierId");

                    b.HasIndex("PreviousBranchId");

                    b.HasIndex("ScanCode");

                    b.HasIndex("ScannerId");

                    b.ToTable("Order_Scans");
                });

            modelBuilder.Entity("Data.Entities.Operation.ProductType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Data.Entities.Operation.Return_ChangeAdd.Return_ChangeAdd_App", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AppStatus")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int");

                    b.Property<string>("ApplyingBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApplyingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrintStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecievingBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReviewedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplyingBranchId");

                    b.HasIndex("AuditorId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("RecievingBranchId");

                    b.HasIndex("RegisterId");

                    b.ToTable("Return_ChangeAdd_Apps");
                });

            modelBuilder.Entity("Data.Entities.Operation.Return_ChangeAdd.Return_ChangeAddWaybillPrint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfPrinted")
                        .HasColumnType("int");

                    b.Property<string>("PrintBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrinterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PrintingScanTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Return_ChangeAdd_AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrintBranchId");

                    b.HasIndex("PrinterId");

                    b.HasIndex("Return_ChangeAdd_AppId");

                    b.ToTable("Return_ChangeAddWaybillPrints");
                });

            modelBuilder.Entity("Data.Entities.Operation.Scan", b =>
                {
                    b.Property<int>("ScanCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScanCode"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScanTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScanCode");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Scans");
                });

            modelBuilder.Entity("Data.Entities.Operation.Sorting.FirstSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FinalOrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalOrganizationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstSegmentCode")
                        .HasColumnType("int");

                    b.Property<string>("FirstSegmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("FirstSegments");
                });

            modelBuilder.Entity("Data.Entities.Operation.Sorting.SecondSegment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FirstSegmentId")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BranchCode");

                    b.HasIndex("FirstSegmentId");

                    b.ToTable("SecondSegments");
                });

            modelBuilder.Entity("Data.Entities.Operation.WaybillReprint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfPrinted")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrintBranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrinterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PrintingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber");

                    b.HasIndex("PrintBranchId");

                    b.HasIndex("PrinterId");

                    b.ToTable("WaybillReprints");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "UserId", "Name", "Value");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens", "Security");
                });

            modelBuilder.Entity("ClientQuotation", b =>
                {
                    b.HasOne("Data.Entities.Operation.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsClientCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Finance.Quotation", null)
                        .WithMany()
                        .HasForeignKey("QuotationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Addresses.Area", b =>
                {
                    b.HasOne("Data.Entities.Addresses.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Data.Entities.Addresses.City", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Data.Entities.Addresses.ReceiverAddressBook", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Client", "Client")
                        .WithMany("ReceiverAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Data.Entities.Addresses.SenderAddressBook", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Client", "Client")
                        .WithMany("SenderAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.Abnormal", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Abnormal.AbnormalSubReason", "AbnormalSubReason")
                        .WithMany()
                        .HasForeignKey("AbnormalSubReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithMany("Abnormals")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "RegisterBr")
                        .WithMany()
                        .HasForeignKey("RegisterBrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbnormalSubReason");

                    b.Navigation("Order");

                    b.Navigation("Register");

                    b.Navigation("RegisterBr");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalImages", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Abnormal.Abnormal", "Abnormal")
                        .WithMany("Abnormal_Images")
                        .HasForeignKey("AbnormalNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abnormal");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalReply", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Abnormal.Abnormal", "Abnormal")
                        .WithMany()
                        .HasForeignKey("AbnormalNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abnormal");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalReplyImages", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Abnormal.AbnormalReply", "Reply")
                        .WithMany("Reply_Images")
                        .HasForeignKey("ReplyNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalSubReason", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Abnormal.AbnormalMainReason", "MainReason")
                        .WithMany()
                        .HasForeignKey("MainReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainReason");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.Ticket", b =>
                {
                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithMany("Order_Tickets")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Addresses.Area", "ReceiverAddress")
                        .WithMany()
                        .HasForeignKey("ReceiverAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "RegisterBr")
                        .WithMany()
                        .HasForeignKey("RegisterBrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.CustomerService.Ticket.TicketSubQuestion", "SubQuestion")
                        .WithMany()
                        .HasForeignKey("SubQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ReceiverAddress");

                    b.Navigation("Register");

                    b.Navigation("RegisterBr");

                    b.Navigation("SubQuestion");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.TicketReplyImages", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Ticket.Ticket", "Ticket")
                        .WithMany("TicketReplyImages")
                        .HasForeignKey("TicketNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.TicketSubQuestion", b =>
                {
                    b.HasOne("Data.Entities.CustomerService.Ticket.TicketMainQuestion", "MainQuestion")
                        .WithMany()
                        .HasForeignKey("MainQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainQuestion");
                });

            modelBuilder.Entity("Data.Entities.Finance.Cash_FODCollection", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Collector")
                        .WithMany()
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithOne("Cash_FODCollection")
                        .HasForeignKey("Data.Entities.Finance.Cash_FODCollection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collector");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Finance.COD_Collection", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Collector")
                        .WithMany()
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithOne("COD_Collection")
                        .HasForeignKey("Data.Entities.Finance.COD_Collection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collector");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Finance.Formula", b =>
                {
                    b.HasOne("Data.Entities.Finance.Quotation_Zone", "QuotationZone")
                        .WithMany("Formulas")
                        .HasForeignKey("ZoneId", "QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuotationZone");
                });

            modelBuilder.Entity("Data.Entities.Finance.Quotation", b =>
                {
                    b.HasOne("Data.Entities.Operation.BranchLevel", "AffailiatedBranch")
                        .WithMany()
                        .HasForeignKey("AffailiatedBranchCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffailiatedBranch");

                    b.Navigation("Client");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Data.Entities.Finance.Quotation_Zone", b =>
                {
                    b.HasOne("Data.Entities.Finance.Quotation", "Quotation")
                        .WithMany("QuotationZones")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Finance.Zone", "Zone")
                        .WithMany("QuotationZones")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Data.Entities.Finance.Zone", b =>
                {
                    b.HasOne("Data.Entities.Operation.BranchLevel", "AffailiatedBranch")
                        .WithMany()
                        .HasForeignKey("AffailiatedBranchCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AffailiatedBranch");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.AppRole", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "CreationUsers")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "ModificationUsers")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CreationUsers");

                    b.Navigation("ModificationUsers");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.AppUser", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "CreationUsers")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Data.Entities.IdentityEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "ModificationUsers")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Data.Entities.IdentityEntities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreationUsers");

                    b.Navigation("Department");

                    b.Navigation("ModificationUsers");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.Department", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Data.Entities.IdentityEntities.Position", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId");

                    b.Navigation("Creator");

                    b.Navigation("Department");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Data.Entities.Operation.BranchLevel", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "BranchSuper")
                        .WithMany("BranchLevels")
                        .HasForeignKey("SuperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("BranchSuper");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("Data.Entities.Operation.Client", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Area", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "CustomerBR")
                        .WithMany()
                        .HasForeignKey("CustomerBRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Creator");

                    b.Navigation("CustomerBR");

                    b.Navigation("Modifier");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("Data.Entities.Operation.COD_FOD_Adjustment.COD_FOD_Application", b =>
                {
                    b.HasOne("Data.Entities.Operation.BranchLevel", "ApplyingBranch")
                        .WithMany()
                        .HasForeignKey("ApplyingBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithMany("COD_FOD_Apps")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "RecievingBranch")
                        .WithMany()
                        .HasForeignKey("RecievingBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplyingBranch");

                    b.Navigation("Auditor");

                    b.Navigation("Order");

                    b.Navigation("RecievingBranch");

                    b.Navigation("Register");
                });

            modelBuilder.Entity("Data.Entities.Operation.Order", b =>
                {
                    b.HasOne("Data.Entities.Operation.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientCode");

                    b.HasOne("Data.Entities.Operation.BranchLevel", "DeliveryBR")
                        .WithMany()
                        .HasForeignKey("DeliveryBRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "DeliveryCourier")
                        .WithMany()
                        .HasForeignKey("DeliveryCourierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "LastUpdateBR")
                        .WithMany()
                        .HasForeignKey("LastUpdateBRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "PickupBR")
                        .WithMany()
                        .HasForeignKey("PickupBRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "PickupCourier")
                        .WithMany()
                        .HasForeignKey("PickupCourierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Addresses.Area", "RecieverAddress")
                        .WithMany()
                        .HasForeignKey("RecieverAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Addresses.Area", "SenderAddress")
                        .WithMany()
                        .HasForeignKey("SenderAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "SigningBR")
                        .WithMany()
                        .HasForeignKey("SigningBRId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DeliveryBR");

                    b.Navigation("DeliveryCourier");

                    b.Navigation("LastUpdateBR");

                    b.Navigation("PickupBR");

                    b.Navigation("PickupCourier");

                    b.Navigation("ProductType");

                    b.Navigation("RecieverAddress");

                    b.Navigation("SenderAddress");

                    b.Navigation("SigningBR");
                });

            modelBuilder.Entity("Data.Entities.Operation.Order_Scan", b =>
                {
                    b.HasOne("Data.Entities.Operation.BranchLevel", "BranchScan")
                        .WithMany()
                        .HasForeignKey("BranchScanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "DeliveryCourier")
                        .WithMany()
                        .HasForeignKey("DeliveryCourierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "NextBranch")
                        .WithMany()
                        .HasForeignKey("NextBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithMany("Order_Scans")
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "PickupCourier")
                        .WithMany()
                        .HasForeignKey("PickupCourierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "PreviousBranch")
                        .WithMany()
                        .HasForeignKey("PreviousBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Scan", "Scan")
                        .WithMany("Order_Scans")
                        .HasForeignKey("ScanCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Scanner")
                        .WithMany()
                        .HasForeignKey("ScannerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchScan");

                    b.Navigation("DeliveryCourier");

                    b.Navigation("NextBranch");

                    b.Navigation("Order");

                    b.Navigation("PickupCourier");

                    b.Navigation("PreviousBranch");

                    b.Navigation("Scan");

                    b.Navigation("Scanner");
                });

            modelBuilder.Entity("Data.Entities.Operation.ProductType", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Data.Entities.Operation.Return_ChangeAdd.Return_ChangeAdd_App", b =>
                {
                    b.HasOne("Data.Entities.Operation.BranchLevel", "ApplyingBranch")
                        .WithMany()
                        .HasForeignKey("ApplyingBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithOne("Return_ChangeAdd_App")
                        .HasForeignKey("Data.Entities.Operation.Return_ChangeAdd.Return_ChangeAdd_App", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "RecievingBranch")
                        .WithMany()
                        .HasForeignKey("RecievingBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplyingBranch");

                    b.Navigation("Auditor");

                    b.Navigation("Order");

                    b.Navigation("RecievingBranch");

                    b.Navigation("Register");
                });

            modelBuilder.Entity("Data.Entities.Operation.Return_ChangeAdd.Return_ChangeAddWaybillPrint", b =>
                {
                    b.HasOne("Data.Entities.Operation.BranchLevel", "PrintBranch")
                        .WithMany()
                        .HasForeignKey("PrintBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Printer")
                        .WithMany()
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Return_ChangeAdd.Return_ChangeAdd_App", "Return_ChangeAdd_App")
                        .WithMany()
                        .HasForeignKey("Return_ChangeAdd_AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrintBranch");

                    b.Navigation("Printer");

                    b.Navigation("Return_ChangeAdd_App");
                });

            modelBuilder.Entity("Data.Entities.Operation.Scan", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedId");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Data.Entities.Operation.Sorting.FirstSegment", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Data.Entities.Operation.Sorting.SecondSegment", b =>
                {
                    b.HasOne("Data.Entities.Addresses.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.Sorting.FirstSegment", "FirstSegment")
                        .WithMany()
                        .HasForeignKey("FirstSegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Branch");

                    b.Navigation("FirstSegment");
                });

            modelBuilder.Entity("Data.Entities.Operation.WaybillReprint", b =>
                {
                    b.HasOne("Data.Entities.Operation.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Operation.BranchLevel", "PrintBranch")
                        .WithMany()
                        .HasForeignKey("PrintBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", "Printer")
                        .WithMany()
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PrintBranch");

                    b.Navigation("Printer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.Abnormal", b =>
                {
                    b.Navigation("Abnormal_Images");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Abnormal.AbnormalReply", b =>
                {
                    b.Navigation("Reply_Images");
                });

            modelBuilder.Entity("Data.Entities.CustomerService.Ticket.Ticket", b =>
                {
                    b.Navigation("TicketReplyImages");
                });

            modelBuilder.Entity("Data.Entities.Finance.Quotation", b =>
                {
                    b.Navigation("QuotationZones");
                });

            modelBuilder.Entity("Data.Entities.Finance.Quotation_Zone", b =>
                {
                    b.Navigation("Formulas");
                });

            modelBuilder.Entity("Data.Entities.Finance.Zone", b =>
                {
                    b.Navigation("QuotationZones");
                });

            modelBuilder.Entity("Data.Entities.Operation.BranchLevel", b =>
                {
                    b.Navigation("BranchLevels");
                });

            modelBuilder.Entity("Data.Entities.Operation.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ReceiverAddresses");

                    b.Navigation("SenderAddresses");
                });

            modelBuilder.Entity("Data.Entities.Operation.Order", b =>
                {
                    b.Navigation("Abnormals");

                    b.Navigation("COD_Collection");

                    b.Navigation("COD_FOD_Apps");

                    b.Navigation("Cash_FODCollection");

                    b.Navigation("Order_Scans");

                    b.Navigation("Order_Tickets");

                    b.Navigation("Return_ChangeAdd_App");
                });

            modelBuilder.Entity("Data.Entities.Operation.Scan", b =>
                {
                    b.Navigation("Order_Scans");
                });
#pragma warning restore 612, 618
        }
    }
}
